# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: manus-ai-attack
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'manus-ai-attack'
        replica: $(POD_NAME)

    rule_files:
      - "/etc/prometheus/rules/*.rules"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Manus API
      - job_name: 'manus-api'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: manus-api
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

      # Database
      - job_name: 'postgres-exporter'
        static_configs:
          - targets: ['postgres-exporter:9187']
        relabel_configs:
          - source_labels: [__address__]
            target_label: instance
            replacement: postgres

      # Redis
      - job_name: 'redis-exporter'
        static_configs:
          - targets: ['redis-exporter:9121']
        relabel_configs:
          - source_labels: [__address__]
            target_label: instance
            replacement: redis

      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true

  rules.yml: |
    groups:
      - name: manus-api.rules
        rules:
          - alert: APIHighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.1
            for: 5m
            labels:
              severity: critical
              service: manus-api
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value | humanizePercentage }} for manus-api"

          - alert: APIHighResponseTime
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
            for: 5m
            labels:
              severity: warning
              service: manus-api
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }}s for manus-api"

          - alert: DatabaseConnectionPoolExhausted
            expr: postgres_connections_active / postgres_connections_max > 0.9
            for: 5m
            labels:
              severity: critical
              service: postgres
            annotations:
              summary: "Database connection pool exhausted"
              description: "Connection pool usage is {{ $value | humanizePercentage }}"

          - alert: RedisHighMemoryUsage
            expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
            for: 5m
            labels:
              severity: warning
              service: redis
            annotations:
              summary: "Redis high memory usage"
              description: "Redis memory usage is {{ $value | humanizePercentage }}"

          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 15m
            labels:
              severity: critical
              service: kubernetes
            annotations:
              summary: "Pod is crash looping"
              description: "Pod {{ $labels.pod }} is restarting frequently"

          - alert: TargetDown
            expr: up == 0
            for: 5m
            labels:
              severity: critical
              service: monitoring
            annotations:
              summary: "Target is down"
              description: "{{ $labels.job }}/{{ $labels.instance }} has been down for more than 5 minutes"

---
# Prometheus Secrets
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-secret
  namespace: manus-ai-attack
  labels:
    app: prometheus
    component: secret
type: Opaque
data:
  # Prometheus admin password (base64 encoded)
  admin-password: cHJvbV9hZG1pbl9wYXNzd29yZA==  # prom_admin_password

---
# Prometheus StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: manus-ai-attack
  labels:
    app: prometheus
    component: monitoring
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: monitoring
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: monitoring-sa
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
          name: prometheus
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=15d'
          - '--storage.tsdb.retention.size=100GB'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--rule.file=/etc/prometheus/rules/*.rules'
  volumeClaimTemplates:
  - metadata:
      name: prometheus-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 200Gi
      volumeMode: Filesystem

---
# Prometheus Config Volume
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: manus-ai-attack
  labels:
    app: prometheus
    component: rules
data:
  manus-api.rules: |
    groups:
      - name: manus-api.rules
        rules:
          - record: manus_api:requests_per_second
            expr: rate(http_requests_total[1m])

          - record: manus_api:error_rate
            expr: rate(http_requests_total{status=~"5.."}[1m]) / rate(http_requests_total[1m])

          - record: manus_api:average_response_time
            expr: avg(http_request_duration_seconds)

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: manus-ai-attack
  labels:
    app: prometheus
    component: service
spec:
  type: ClusterIP
  selector:
    app: prometheus
    component: monitoring
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus
  sessionAffinity: ClientIP

---
# Grafana ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: config
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [security]
    admin_user = admin
    admin_password = __admin_password__
    [server]
    http_port = 3000
    [database]
    type = sqlite3
    path = grafana.db

  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true

  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: 'Manus AI Attack Platform'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# Grafana Secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: secret
type: Opaque
data:
  # Base64 encoded values
  admin-password: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==  # grafana_admin_password

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      serviceAccountName: monitoring-sa
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_PATHS_CONFIG
          value: /etc/grafana/grafana.ini
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: grafana-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 50Gi

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: service
spec:
  type: ClusterIP
  selector:
    app: grafana
    component: monitoring
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  sessionAffinity: ClientIP

---
# Grafana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "grafana-auth"
    nginx.ingress.kubernetes.io/auth-realm: "Grafana Authentication Required"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - grafana.manus-ai-attack.com
    secretName: grafana-tls
  rules:
  - host: grafana.manus-ai-attack.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000

---
# Grafana Basic Auth Secret
apiVersion: v1
kind: Secret
metadata:
  name: grafana-auth
  namespace: manus-ai-attack
  labels:
    app: grafana
    component: auth
type: Opaque
data:
  auth: dGVzdDokYXJnMTEkRnJnSm91T0JzN0tEdXV5aU1vZ1VxZ01RZzZqN2N5L09OdjJlV0VyaUJjL3ZReU9qNjJm