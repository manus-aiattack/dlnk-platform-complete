"""
CLI commands for License Management
"""

import click
from rich.console import Console
from rich.table import Table
from datetime import datetime

from core.license_manager import get_license_manager
from core.logger import get_logger

console = Console()
log = get_logger(__name__)


@click.group(name='license')
def license_group():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ License Key"""
    pass


@license_group.command(name='generate')
@click.option('--hours', type=int, help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
@click.option('--days', type=int, help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
@click.option('--months', type=int, help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
@click.option('--uses', type=int, default=1, help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (default: 1)')
@click.option('--user', type=str, help='‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
def generate_license(hours, days, months, uses, user):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á License Key ‡πÉ‡∏´‡∏°‡πà"""
    
    if not any([hours, days, months]):
        console.print("[red]‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (--hours, --days, ‡∏´‡∏£‡∏∑‡∏≠ --months)[/red]")
        return
    
    lm = get_license_manager()
    
    user_info = {"username": user} if user else None
    
    license_key = lm.generate_license_key(
        duration_hours=hours,
        duration_days=days,
        duration_months=months,
        max_uses=uses,
        user_info=user_info
    )
    
    console.print("\n[bold green]‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á License Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à![/bold green]\n")
    console.print(f"[bold cyan]License Key:[/bold cyan]")
    console.print(f"[yellow]{license_key}[/yellow]\n")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    table = Table(title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î License")
    table.add_column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", style="cyan")
    table.add_column("‡∏Ñ‡πà‡∏≤", style="yellow")
    
    if hours:
        table.add_row("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    elif days:
        table.add_row("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", f"{days} ‡∏ß‡∏±‡∏ô")
    elif months:
        table.add_row("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", f"{months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    
    table.add_row("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", str(uses))
    if user:
        table.add_row("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", user)
    
    console.print(table)
    console.print("\n[bold yellow]‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Å‡πá‡∏ö License Key ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢[/bold yellow]\n")


@license_group.command(name='activate')
@click.argument('license_key')
def activate_license(license_key):
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô License Key"""
    
    lm = get_license_manager()
    
    console.print("\n[cyan]üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô License...[/cyan]")
    
    success, message = lm.activate_license(license_key)
    
    if success:
        console.print(f"\n[bold green]{message}[/bold green]\n")
    else:
        console.print(f"\n[bold red]{message}[/bold red]\n")


@license_group.command(name='info')
def license_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• License ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    
    lm = get_license_manager()
    info = lm.get_license_info()
    
    if not info:
        console.print("\n[yellow]‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö License ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô[/yellow]\n")
        console.print("[cyan]üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'dlnk-dlnk license activate <KEY>' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô License[/cyan]\n")
        return
    
    table = Table(title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• License ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    table.add_column("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", style="cyan")
    table.add_column("‡∏Ñ‡πà‡∏≤", style="yellow")
    
    table.add_row("Machine ID", info.get("machine_id", "N/A")[:32] + "...")
    
    if "activated_at" in info:
        activated = datetime.fromisoformat(info["activated_at"])
        table.add_row("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠", activated.strftime("%Y-%m-%d %H:%M:%S"))
    
    if "expires_at" in info:
        expiry = datetime.fromisoformat(info["expires_at"])
        table.add_row("‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", expiry.strftime("%Y-%m-%d %H:%M:%S"))
        
        remaining = expiry - datetime.now()
        if remaining.total_seconds() > 0:
            days = remaining.days
            hours = remaining.seconds // 3600
            table.add_row("‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{days} ‡∏ß‡∏±‡∏ô {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        else:
            table.add_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "[red]‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß[/red]")
    
    uses = info.get("uses", 0)
    max_uses = info.get("max_uses", 1)
    table.add_row("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", f"{uses}/{max_uses} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    if lm.is_terminal_locked():
        table.add_row("Terminal Lock", "[green]‚úÖ Locked[/green]")
    else:
        table.add_row("Terminal Lock", "[yellow]‚ö†Ô∏è  Not Locked[/yellow]")
    
    console.print("\n")
    console.print(table)
    console.print("\n")


@license_group.command(name='revoke')
@click.confirmation_option(prompt='‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å License?')
def revoke_license():
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å License ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    
    lm = get_license_manager()
    lm.revoke_license()
    
    console.print("\n[bold green]‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å License ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à[/bold green]\n")


@license_group.command(name='unlock')
def unlock_terminal():
    """‡∏õ‡∏•‡∏î Terminal Lock (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢ terminal)"""
    
    lm = get_license_manager()
    
    if not lm.is_terminal_locked():
        console.print("\n[yellow]‚ö†Ô∏è  Terminal ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å Lock[/yellow]\n")
        return
    
    lm.unlock_terminal()
    console.print("\n[bold green]‚úÖ ‡∏õ‡∏•‡∏î Terminal Lock ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à[/bold green]\n")

