"""
Attack CLI - ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö 3 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
1. Scan - ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
2. Exploit - ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
3. Post-Exploit - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ (Shell, Privilege Escalation, Backdoor, Data Dump)
"""

import asyncio
import click
import json
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from datetime import datetime

from core.orchestrator import Orchestrator
from core.license_manager import get_license_manager
from core.logger import get_logger
from core.data_models import Target

console = Console()
log = get_logger(__name__)


def check_license():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö License ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
    lm = get_license_manager()
    info = lm.get_license_info()
    
    if not info:
        console.print("\n[bold red]‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö License[/bold red]")
        console.print("[yellow]‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô License ‡∏Å‡πà‡∏≠‡∏ô: dlnk-dlnk license activate <KEY>[/yellow]\n")
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö License
    license_key = info.get("key")
    is_valid, message = lm.validate_license(license_key)
    
    if not is_valid:
        console.print(f"\n[bold red]{message}[/bold red]\n")
        return False
    
    return True


@click.group(name='attack')
def attack_group():
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà"""
    pass


@attack_group.command(name='scan')
@click.option('--target', '-t', required=True, help='‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ (URL ‡∏´‡∏£‡∏∑‡∏≠ IP)')
@click.option('--output', '-o', help='‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
@click.option('--aggressive', '-a', is_flag=True, help='‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á')
def scan_target(target, output, aggressive):
    """
    ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
    
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:
    - ‡∏™‡πÅ‡∏Å‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö WAF
    - ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (SQL Injection, XSS, SSRF, IDOR, etc.)
    - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
    """
    
    if not check_license():
        return
    
    console.print(Panel.fit(
        f"[bold red]üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target}[/bold red]",
        border_style="red"
    ))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Orchestrator
    orchestrator = Orchestrator()
    
    async def run_scan():
        try:
            await orchestrator.initialize()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Target
            target_model = Target(
                name=f"Attack_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                url=target,
                attack_mode=True,
                aggressive=aggressive
            )
            
            # ‡πÇ‡∏´‡∏•‡∏î Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scan
            workflow_path = Path("config/attack_scan_workflow.yaml")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("[red]‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà...", total=None)
                
                results = await orchestrator.execute_workflow(
                    workflow_path=str(workflow_path),
                    target=target_model
                )
                
                progress.update(task, completed=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            display_scan_results(results, target)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if output:
                save_results(results, output)
                console.print(f"\n[green]‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output}[/green]")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô workspace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            workspace_dir = Path("workspace")
            workspace_dir.mkdir(exist_ok=True)
            
            scan_file = workspace_dir / f"scan_{target.replace('://', '_').replace('/', '_')}.json"
            save_results(results, str(scan_file))
            
            console.print(f"\n[cyan]üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Scan Results ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {scan_file}[/cyan]")
            console.print(f"[yellow]üìå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà: dlnk-dlnk attack exploit --scan-file {scan_file}[/yellow]\n")
            
        finally:
            await orchestrator.cleanup()
    
    asyncio.run(run_scan())


@attack_group.command(name='exploit')
@click.option('--scan-file', '-s', required=True, help='‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Scan')
@click.option('--vuln-type', '-v', help='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)')
@click.option('--output', '-o', help='‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
@click.option('--callback-url', '-c', help='URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö callback (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XSS, SSRF)')
def exploit_vulnerabilities(scan_file, vuln_type, output, callback_url):
    """
    ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
    
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:
    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Scan
    - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    - ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÑ‡∏î‡πâ RCE ‡∏´‡∏£‡∏∑‡∏≠ Shell
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    """
    
    if not check_license():
        return
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Scan
    if not Path(scan_file).exists():
        console.print(f"\n[bold red]‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {scan_file}[/bold red]\n")
        return
    
    with open(scan_file, 'r') as f:
        scan_results = json.load(f)
    
    console.print(Panel.fit(
        f"[bold red]üí• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà[/bold red]",
        border_style="red"
    ))
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö
    display_vulnerabilities(scan_results)
    
    # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÑ‡∏´‡∏ô
    if not vuln_type:
        console.print("\n[yellow]üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:[/yellow]")
        console.print("[cyan]  1. SQL Injection[/cyan]")
        console.print("[cyan]  2. XSS (Cross-Site Scripting)[/cyan]")
        console.print("[cyan]  3. RCE (Remote Code Execution)[/cyan]")
        console.print("[cyan]  4. SSRF (Server-Side Request Forgery)[/cyan]")
        console.print("[cyan]  5. IDOR (Insecure Direct Object Reference)[/cyan]")
        console.print("[cyan]  6. File Upload[/cyan]")
        console.print("[cyan]  7. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Auto)[/cyan]")
        
        choice = click.prompt("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", type=int, default=7)
        
        vuln_map = {
            1: "sql_injection",
            2: "xss",
            3: "rce",
            4: "ssrf",
            5: "idor",
            6: "file_upload",
            7: "all"
        }
        
        vuln_type = vuln_map.get(choice, "all")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Orchestrator
    orchestrator = Orchestrator()
    
    async def run_exploit():
        try:
            await orchestrator.initialize()
            
            # ‡πÇ‡∏´‡∏•‡∏î Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Exploit
            workflow_path = Path("config/attack_exploit_workflow.yaml")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Target ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Scan
            target_url = scan_results.get("target", "")
            target_model = Target(
                name=f"Exploit_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                url=target_url,
                attack_mode=True,
                vuln_type=vuln_type,
                callback_url=callback_url,
                scan_results=scan_results
            )
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("[red]‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà...", total=None)
                
                results = await orchestrator.execute_workflow(
                    workflow_path=str(workflow_path),
                    target=target_model
                )
                
                progress.update(task, completed=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            display_exploit_results(results)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if output:
                save_results(results, output)
                console.print(f"\n[green]‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output}[/green]")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô workspace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            workspace_dir = Path("workspace")
            exploit_file = workspace_dir / f"exploit_{target_url.replace('://', '_').replace('/', '_')}.json"
            save_results(results, str(exploit_file))
            
            console.print(f"\n[cyan]üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Exploit Results ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {exploit_file}[/cyan]")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ Shell ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if has_shell(results):
                console.print(f"\n[bold green]üéâ ‡πÑ‡∏î‡πâ Shell ‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠:[/bold green]")
                console.print(f"[yellow]dlnk-dlnk attack post-exploit --exploit-file {exploit_file}[/yellow]\n")
            else:
                console.print(f"\n[yellow]‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Shell ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Post-Exploit ‡πÑ‡∏î‡πâ:[/yellow]")
                console.print(f"[cyan]dlnk-dlnk attack post-exploit --exploit-file {exploit_file}[/cyan]\n")
            
        finally:
            await orchestrator.cleanup()
    
    asyncio.run(run_exploit())


@attack_group.command(name='post-exploit')
@click.option('--exploit-file', '-e', required=True, help='‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Exploit')
@click.option('--action', '-a', help='‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (shell, privesc, backdoor, dump)')
@click.option('--output-dir', '-o', help='‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Dump')
def post_exploitation(exploit_file, action, output_dir):
    """
    ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:
    - ‡∏£‡∏±‡∏ö Shell ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Interactive Shell
    - ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Privilege Escalation)
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á Backdoor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    - Dump ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Database, Files, Credentials)
    - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    """
    
    if not check_license():
        return
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Exploit
    if not Path(exploit_file).exists():
        console.print(f"\n[bold red]‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {exploit_file}[/bold red]\n")
        return
    
    with open(exploit_file, 'r') as f:
        exploit_results = json.load(f)
    
    console.print(Panel.fit(
        f"[bold red]üî• ‡πÄ‡∏£‡∏¥‡πà‡∏° Post-Exploitation[/bold red]",
        border_style="red"
    ))
    
    # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if not action:
        console.print("\n[yellow]üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:[/yellow]")
        console.print("[cyan]  1. ‡∏£‡∏±‡∏ö Shell ‡πÅ‡∏•‡∏∞ Upgrade[/cyan]")
        console.print("[cyan]  2. ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Privilege Escalation)[/cyan]")
        console.print("[cyan]  3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Backdoor[/cyan]")
        console.print("[cyan]  4. Dump ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Database, Files)[/cyan]")
        console.print("[cyan]  5. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Auto)[/cyan]")
        
        choice = click.prompt("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", type=int, default=5)
        
        action_map = {
            1: "shell",
            2: "privesc",
            3: "backdoor",
            4: "dump",
            5: "all"
        }
        
        action = action_map.get(choice, "all")
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î output directory
    if not output_dir:
        output_dir = Path("workspace/loot")
        output_dir.mkdir(parents=True, exist_ok=True)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Orchestrator
    orchestrator = Orchestrator()
    
    async def run_post_exploit():
        try:
            await orchestrator.initialize()
            
            # ‡πÇ‡∏´‡∏•‡∏î Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Post-Exploit
            workflow_path = Path("config/attack_post_exploit_workflow.yaml")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Target ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Exploit
            target_url = exploit_results.get("target", "")
            target_model = Target(
                name=f"PostExploit_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                url=target_url,
                attack_mode=True,
                post_exploit_action=action,
                output_dir=str(output_dir),
                exploit_results=exploit_results
            )
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("[red]‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Post-Exploitation...", total=None)
                
                results = await orchestrator.execute_workflow(
                    workflow_path=str(workflow_path),
                    target=target_model
                )
                
                progress.update(task, completed=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            display_post_exploit_results(results, output_dir)
            
            console.print(f"\n[bold green]‚úÖ Post-Exploitation ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå![/bold green]\n")
            
        finally:
            await orchestrator.cleanup()
    
    asyncio.run(run_post_exploit())


def display_scan_results(results, target):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ Scan"""
    console.print(f"\n[bold green]‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå![/bold green]\n")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
    table = Table(title=f"‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô {target}")
    table.add_column("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", style="cyan")
    table.add_column("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á", style="yellow")
    table.add_column("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", style="white")
    
    for result in results:
        if result.get("vulnerabilities"):
            for vuln in result["vulnerabilities"]:
                table.add_row(
                    vuln.get("type", "Unknown"),
                    vuln.get("severity", "Unknown"),
                    vuln.get("description", "")[:50] + "..."
                )
    
    console.print(table)


def display_vulnerabilities(scan_results):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Scan"""
    console.print("\n[bold yellow]üìä ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö:[/bold yellow]\n")
    
    vulns = scan_results.get("vulnerabilities", [])
    
    if not vulns:
        console.print("[red]‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà[/red]\n")
        return
    
    for i, vuln in enumerate(vulns, 1):
        console.print(f"[cyan]{i}. {vuln.get('type', 'Unknown')}[/cyan] - {vuln.get('severity', 'Unknown')}")


def display_exploit_results(results):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå"""
    console.print(f"\n[bold green]‚úÖ ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå![/bold green]\n")
    
    table = Table(title="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ")
    table.add_column("‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà", style="cyan")
    table.add_column("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", style="yellow")
    table.add_column("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", style="white")
    
    for result in results:
        if result.get("exploited"):
            table.add_row(
                result.get("vuln_type", "Unknown"),
                "[green]‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à[/green]",
                result.get("result", "")[:50] + "..."
            )
        else:
            table.add_row(
                result.get("vuln_type", "Unknown"),
                "[red]‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß[/red]",
                result.get("error", "")[:50] + "..."
            )
    
    console.print(table)


def display_post_exploit_results(results, output_dir):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Post-Exploitation"""
    console.print(f"\n[bold green]üì¶ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Post-Exploitation:[/bold green]\n")
    
    table = Table(title="‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö")
    table.add_column("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", style="cyan")
    table.add_column("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", style="white")
    
    for result in results:
        if result.get("shell"):
            table.add_row("üêö Shell", result["shell"].get("type", "Unknown"))
        
        if result.get("privesc"):
            table.add_row("üëë Privilege", result["privesc"].get("level", "Unknown"))
        
        if result.get("backdoor"):
            table.add_row("üö™ Backdoor", result["backdoor"].get("method", "Unknown"))
        
        if result.get("data_dump"):
            table.add_row("üíæ Data Dump", f"{len(result['data_dump'])} files")
    
    console.print(table)
    console.print(f"\n[cyan]üìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Dump ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output_dir}[/cyan]\n")


def save_results(results, output_file):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)


def has_shell(results):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ Shell ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    for result in results:
        if result.get("shell") or result.get("rce"):
            return True
    return False

