import asyncio
import json
import time
from core.base_agent import BaseAgent
from core.data_models import AgentData, Strategy, VulnerabilityScanReport, ErrorType
from core.logger import log

class VulnerabilityScanAgent(BaseAgent):
    """
    Performs vulnerability scanning on a target host/ports.
    """
    required_tools = ["nuclei"]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.pubsub_manager = self.orchestrator.pubsub_manager
        self.report_class = VulnerabilityScanReport

    async def run(self, strategy: Strategy) -> VulnerabilityScanReport:
        start_time = time.time()
        target = strategy.context.get("target") # Can be IP or URL
        if not target:
            end_time = time.time()
            return self.create_report(
                errors=["Target not specified for VulnerabilityScanAgent."],
                error_type=ErrorType.CONFIGURATION,
                summary="Vulnerability scan failed: Target not specified."
            )

        log.info(f"VulnerabilityScanAgent: Starting Nuclei scan on {target}...")
        
        try:
            # Assuming nuclei is in the PATH or configured
            # You might need to adjust the command based on your Nuclei setup
            command = f"nuclei -u {target} -silent -json"
            
            result = await self.orchestrator.run_shell_command(command)

            if result["exit_code"] == 0 and result["stdout"]:
                findings = []
                for line in result["stdout"].splitlines():
                    try:
                        json_line = json.loads(line)
                        findings.append(json_line)
                    except json.JSONDecodeError:
                        log.warning(f"VulnerabilityScanAgent: Could not decode JSON from Nuclei output: {line}")
                
                summary = f"Nuclei scan on {target} completed. Found {len(findings)} findings."
                log.success(summary)
                
                # Publish scan results
                await self.pubsub_manager.publish(
                    "vulnerability_scan_results",
                    {
                        "agent": self.__class__.__name__,
                        "target": target,
                        "results": findings,
                        "timestamp": time.time()
                    }
                )

                end_time = time.time()
                return self.create_report(
                    summary=summary,
                    target=target,
                    scan_results=findings
                )
            else:
                error_message = result["stderr"] or f"Nuclei scan failed with exit code {result['exit_code']}"
                log.error(f"VulnerabilityScanAgent: Nuclei scan failed: {error_message}")
                end_time = time.time()
                return self.create_report(
                    errors=[f"Nuclei scan failed: {error_message}"],
                    error_type=ErrorType.LOGIC,
                    summary=f"Nuclei scan failed for {target}.",
                    target=target,
                    scan_results=[]
                )

        except Exception as e:
            log.error(f"VulnerabilityScanAgent: An unexpected error occurred: {e}", exc_info=True)
            end_time = time.time()
            return self.create_report(
                errors=[f"An unexpected error occurred: {e}"],
                error_type=ErrorType.LOGIC,
                summary=f"Vulnerability scan failed due to an unexpected error: {e}",
                target=target,
                scan_results=[]
            )

    async def execute(self, strategy: Strategy) -> AgentData:
        """Execute vulnerability scan agent"""
        try:
            target = strategy.context.get('target_url', '')
            
            # Call existing method
            if asyncio.iscoroutinefunction(self.run):
                results = await self.run(target)
            else:
                results = self.run(target)
            
            return AgentData(
                agent_name=self.__class__.__name__,
                success=True,
                summary=f"{self.__class__.__name__} completed successfully",
                errors=[],
                execution_time=0,
                memory_usage=0,
                cpu_usage=0,
                context={'results': results}
            )
        except Exception as e:
            return AgentData(
                agent_name=self.__class__.__name__,
                success=False,
                summary=f"{self.__class__.__name__} failed",
                errors=[str(e)],
                execution_time=0,
                memory_usage=0,
                cpu_usage=0,
                context={}
            )
