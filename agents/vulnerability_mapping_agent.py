"""
An agent that maps versioned technologies to known CVEs using the NVD.
"""

import asyncio
from core.data_models import AgentData, Strategy
from core.logger import log
from core.data_models import Strategy, VulnerabilityMappingReport, Vulnerability, AttackPhase, ErrorType
from core.target_model_manager import TargetModel
import time
from core.nvd_client import NVDClient as nvd_client_class

from core.base_agent import BaseAgent


class VulnerabilityMappingAgent(BaseAgent):
    supported_phases = [AttackPhase.RECONNAISSANCE]
    required_tools = []

    def __init__(self, context_manager=None, orchestrator=None, **kwargs):
        super().__init__(context_manager, orchestrator, **kwargs)
        self.target_model_manager = self.orchestrator.target_model_manager
        self.nvd_client = nvd_client_class()
        self.report_class = VulnerabilityMappingReport

    async def run(self, strategy: Strategy, **kwargs) -> VulnerabilityMappingReport:
        start_time = time.time()
        hostname = self.orchestrator.state.target_host
        log.phase(
            f"VulnerabilityMappingAgent: Mapping vulnerabilities for {hostname}")
        target_model = self.target_model_manager.get_target(hostname)

        if not target_model:
            end_time = time.time()
            return VulnerabilityMappingReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                errors=[f"Target model for {hostname} not found."],
                error_type=ErrorType.CONFIGURATION,
                summary=f"Vulnerability mapping failed: Target model for {hostname} not found.",
                hostname=hostname
            )

        technologies_to_scan = {tech for tech in target_model.technologies if any(
            char.isdigit() for char in tech)}
        if not technologies_to_scan:
            summary = "No versioned technologies found to map."
            end_time = time.time()
            return VulnerabilityMappingReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                summary=summary,
                hostname=hostname
            )

        log.info(
            f"Found {len(technologies_to_scan)} versioned technologies to map: {technologies_to_scan}")

        tasks = [self.nvd_client.search(tech) for tech in technologies_to_scan]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        technologies_mapped = {}
        newly_found_vulns = []

        for tech, result in zip(technologies_to_scan, results):
            if isinstance(result, Exception) or not result:
                log.error(f"Failed to fetch CVEs for {tech}: {result}")
                continue

            cve_ids_found = []
            for vuln_data in result:
                cve_id = vuln_data.get('id')
                if not cve_id:
                    continue

                if any(v.vulnerability_id == cve_id for v in target_model.confirmed_vulnerabilities):
                    continue

                new_vuln = Vulnerability(
                    host=hostname,
                    vulnerability_id=cve_id,
                    description=vuln_data.get(
                        'summary', 'No description available.'),
                    severity=vuln_data.get('severity', 'UNKNOWN'),
                    source_agent="VulnerabilityMappingAgent"
                )
                newly_found_vulns.append(new_vuln)
                cve_ids_found.append(cve_id)

            if cve_ids_found:
                technologies_mapped[tech] = cve_ids_found

        if not newly_found_vulns:
            summary = "Scan complete. No new vulnerabilities found for the given technologies."
            log.info(summary)
            end_time = time.time()
            return VulnerabilityMappingReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                summary=summary,
                hostname=hostname
            )

        target_model.confirmed_vulnerabilities.extend(newly_found_vulns)
        self.target_model_manager.save_model(target_model)

        summary = f"Successfully mapped {len(technologies_mapped)} technologies and found {len(newly_found_vulns)} new vulnerabilities."
        log.success(summary)

        end_time = time.time()
        return VulnerabilityMappingReport(
            agent_name=self.__class__.__name__,
            start_time=start_time,
            end_time=end_time,
            hostname=hostname,
            technologies_mapped=technologies_mapped,
            summary=summary
        )

    async def execute(self, strategy: Strategy) -> AgentData:
        """Execute vulnerability mapping agent"""
        try:
            target = strategy.context.get('target_url', '')
            
            # Call existing method
            if asyncio.iscoroutinefunction(self.run):
                results = await self.run(target)
            else:
                results = self.run(target)
            
            return AgentData(
                agent_name=self.__class__.__name__,
                success=True,
                summary=f"{self.__class__.__name__} completed successfully",
                errors=[],
                execution_time=0,
                memory_usage=0,
                cpu_usage=0,
                context={'results': results}
            )
        except Exception as e:
            return AgentData(
                agent_name=self.__class__.__name__,
                success=False,
                summary=f"{self.__class__.__name__} failed",
                errors=[str(e)],
                execution_time=0,
                memory_usage=0,
                cpu_usage=0,
                context={}
            )
