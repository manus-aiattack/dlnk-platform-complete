version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: dlnk-postgres
    environment:
      POSTGRES_USER: dlnk_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dlnk_secure_password}
      POSTGRES_DB: dlnk_attack_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dlnk_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dlnk-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dlnk-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dlnk-network
    restart: unless-stopped

  # Ollama LLM (Optional - requires GPU)
  # Uncomment if you have GPU support
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: dlnk-ollama
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   ports:
  #     - "11434:11434"
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   networks:
  #     - dlnk-network
  #   restart: unless-stopped

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dlnk-api
    environment:
      # Database
      DATABASE_URL: postgresql://dlnk_user:${DB_PASSWORD:-dlnk_secure_password}@postgres:5432/dlnk_attack_platform
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: dlnk_user
      DB_PASSWORD: ${DB_PASSWORD:-dlnk_secure_password}
      DB_NAME: dlnk_attack_platform
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Ollama (use host if not using Docker Ollama)
      OLLAMA_HOST: ${OLLAMA_HOST:-http://host.docker.internal:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-mixtral:latest}
      
      # API
      API_HOST: 0.0.0.0
      API_PORT: 8000
      
      # Security
      SIMULATION_MODE: ${SIMULATION_MODE:-False}
      
      # Workspace
      WORKSPACE_DIR: /app/workspace
    volumes:
      - ./workspace:/app/workspace
      - ./config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dlnk-network
    restart: unless-stopped

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: dlnk-frontend
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - dlnk-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: dlnk-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    networks:
      - dlnk-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  dlnk-network:
    driver: bridge

