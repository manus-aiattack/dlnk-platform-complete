"""
Exploit API Routes
Generate and execute exploits
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Dict
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/exploit", tags=["exploit"])


class ExploitRequest(BaseModel):
    target_info: Dict
    exploit_type: Optional[str] = None
    custom_payload: Optional[str] = None


class ExploitResponse(BaseModel):
    exploit_id: str
    code: str
    description: str
    success_rate: float
    instructions: List[str]


@router.post("/generate", response_model=ExploitResponse)
async def generate_exploit(request: ExploitRequest):
    """
    Generate exploit code based on target information
    
    Args:
        request: ExploitRequest with target info
    
    Returns:
        ExploitResponse with generated exploit code
    """
    try:
        # Import AI integration
        from core.ai_integration import AIIntegration
        
        ai = AIIntegration()
        
        # Generate exploit using AI
        result = await ai.generate_exploit_code(request.target_info)
        
        if result.get("success"):
            import uuid
            return ExploitResponse(
                exploit_id=str(uuid.uuid4()),
                code=result.get("code", ""),
                description=result.get("description", ""),
                success_rate=result.get("success_rate", 0.0),
                instructions=result.get("instructions", [])
            )
        else:
            raise HTTPException(status_code=500, detail="Failed to generate exploit")
    
    except Exception as e:
        logger.error(f"Exploit generation error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/execute")
async def execute_exploit(request: ExploitRequest):
    """
    Execute exploit against target
    
    Args:
        request: ExploitRequest with target and exploit info
    
    Returns:
        Execution results
    """
    try:
        from agents.exploit_agent import ExploitAgent
        
        agent = ExploitAgent()
        
        result = await agent.run("execute", {
            "target": request.target_info.get("host"),
            "exploit_type": request.exploit_type,
            "payload": request.custom_payload
        })
        
        return {
            "success": result.success,
            "data": result.data
        }
    
    except Exception as e:
        logger.error(f"Exploit execution error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/list")
async def list_exploits():
    """
    List available exploits from knowledge base
    
    Returns:
        List of available exploits
    """
    try:
        # Import knowledge base
        from services.knowledge_base import KnowledgeBase
        
        kb = KnowledgeBase()
        exploits = await kb.get_all_exploits()
        
        return {"exploits": exploits}
    
    except Exception as e:
        logger.error(f"List exploits error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{exploit_id}")
async def get_exploit(exploit_id: str):
    """
    Get exploit details by ID
    
    Args:
        exploit_id: Exploit ID
    
    Returns:
        Exploit details
    """
    try:
        from services.knowledge_base import KnowledgeBase
        
        kb = KnowledgeBase()
        exploit = await kb.get_exploit(exploit_id)
        
        if not exploit:
            raise HTTPException(status_code=404, detail="Exploit not found")
        
        return exploit
    
    except Exception as e:
        logger.error(f"Get exploit error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/search")
async def search_exploits(query: Dict):
    """
    Search exploits by criteria
    
    Args:
        query: Search criteria (platform, severity, cve, etc.)
    
    Returns:
        List of matching exploits
    """
    try:
        from services.knowledge_base import KnowledgeBase
        
        kb = KnowledgeBase()
        exploits = await kb.search_exploits(query)
        
        return {"exploits": exploits}
    
    except Exception as e:
        logger.error(f"Search exploits error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

