from __future__ import annotations
from typing import Dict, Any
import uuid
from dataclasses import dataclass, field
import time
from pydantic import BaseModel, Field
from typing import List, Dict, Optional, Any
from enum import Enum, auto


class AttackPhase(Enum):
    RECONNAISSANCE = auto()
    TRIAGE = auto()
    EXPLOITATION = auto()
    INITIAL_FOOTHOLD = auto()
    LATERAL_MOVEMENT = auto()
    POST_EXPLOITATION = auto()
    DATA_EXFILTRATION = auto()
    SHELL = auto()
    PRIVILEGE_ESCALATION = auto()
    ESCALATION = auto()
    PERSISTENCE = auto()
    DEFENSE_EVASION = auto()
    DISRUPTION = auto()
    RECOVERY = auto()
    REPORTING = auto()
    TriageAndResearch = auto()
    TryMetasploit = auto()
    PrivilegeEscalation = auto()
    PhaseA = auto()
    PhaseB_Parallel = auto()
    PhaseC_Failure = auto()
    PhaseD_Success = auto()


class ScanIntensity(Enum):
    STEALTH = auto()
    NORMAL = auto()
    AGGRESSIVE = auto()


class ErrorType(str, Enum):
    UNKNOWN = "UNKNOWN"
    CONFIGURATION = "CONFIGURATION_ERROR"
    NETWORK = "NETWORK_ERROR"
    LOGIC = "LOGIC_ERROR"
    TARGET_UNREACHABLE = "TARGET_UNREACHABLE"
    CIRCUIT_BREAKER_OPEN = "CIRCUIT_BREAKER_OPEN"
    AGENT_REPORTED_FAILURE = "AGENT_REPORTED_FAILURE"
    TIMEOUT = "TIMEOUT"
    EXECUTION_FAILED = "EXECUTION_FAILED"


class AgentData(BaseModel):
    """Base class for all agent report data models."""
    agent_name: str = ""
    start_time: float = 0.0
    end_time: float = 0.0
    success: bool = False
    summary: Optional[str] = "" # FIX: Added for consistent reporting
    errors: List[str] = Field(default_factory=list)
    error_type: Optional[ErrorType] = ErrorType.UNKNOWN
    execution_time: float = 0.0
    memory_usage: float = 0.0
    cpu_usage: float = 0.0
    guidance: Optional[List[str]] = None # Added guidance field
    context: Dict[str, Any] = Field(default_factory=dict) # Added context field

    def model_post_init(self, __context: Any) -> None: # Renamed for Pydantic v2
        """Calculate execution time after initialization"""
        if self.start_time and self.end_time:
            self.execution_time = self.end_time - self.start_time

    def to_dict(self):
        return self.model_dump()


class ReconData(AgentData):
    """Data collected during the reconnaissance phase."""
    target_url: str
    target_host: str
    subdomains: List[str] = Field(default_factory=list)
    directories: List[str] = Field(default_factory=list)
    network_services: List[Dict[str, Any]] = Field(default_factory=list)
    harvester_results: List[str] = Field(default_factory=list)
    whatweb_results: List[str] = Field(default_factory=list)
    nikto_results: List[str] = Field(default_factory=list)
    wapiti_results: List[str] = Field(default_factory=list)
    dnsrecon_results: List[str] = Field(default_factory=list)
    fierce_results: List[str] = Field(default_factory=list)
    feroxbuster_results: List[str] = Field(default_factory=list)
    crawled_urls: List[str] = Field(default_factory=list)
    forms: List[dict] = Field(default_factory=list)
    parameters: List[str] = Field(default_factory=list)
    cors_findings: List[str] = Field(default_factory=list)
    tls_scan_results: List[str] = Field(default_factory=list)
    http_servers: List[str] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class WafReport(AgentData):
    """The report generated by the WafDetectorAgent."""
    detected_waf: str = "None"

    def to_dict(self):
        return self.model_dump()


class WpscanReport(AgentData):
    """The report generated by the WpscanAgent."""
    target_url: str = ""
    raw_output: str = ""
    findings: List[Dict[str, Any]] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class NmapParserReport(AgentData):
    """Report from the NmapParserAgent."""
    findings: List[Any] = Field(default_factory=list)
    summary: str = ""


class DirsearchParserReport(AgentData):
    """Report from the DirsearchParserAgent."""
    findings: List[Any] = Field(default_factory=list)
    summary: str = ""


class FeroxbusterParserReport(AgentData):
    """Report from the FeroxbusterParserAgent."""
    findings: List[Any] = Field(default_factory=list)
    summary: str = ""


@dataclass
class InterestingFinding:
    """A single interesting finding identified during triage."""
    finding: str
    reasoning: str
    priority: int = 0
    next_steps: str = ""
    context: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self):
        return {
            "finding": self.finding,
            "reasoning": self.reasoning,
            "priority": self.priority,
            "next_steps": self.next_steps,
            "context": self.context
        }


class TriageReport(AgentData):
    """The report generated by the TriageAgent after analyzing reconnaissance data."""
    original_data_summary: Dict[str, int] = Field(default_factory=dict)
    assessment: str = ""
    interesting_findings: List[InterestingFinding] = Field(
        default_factory=list)
    score: int = 0
    is_interesting: bool = False
    reasoning_for_score: str = ""

    def to_dict(self):
        return self.model_dump()


class Finding(BaseModel):
    source: str
    data: dict

    def to_dict(self):
        return self.model_dump()


class VulnerabilityReport(AgentData):
    target_technology: str = ""
    summary: str
    findings: List[Finding] = Field(default_factory=list)

    def to_dict(self):
        d = self.model_dump()
        d['findings'] = [f.to_dict() for f in self.findings]
        return d


@dataclass
class FuzzingFinding:
    """Represents a potential vulnerability identified during fuzzing."""
    parameter: str
    payload_type: str
    description: str
    raw_response: str
    severity: str = "UNKNOWN"
    exploit_suggestion: str = ""


class FuzzingReport(AgentData):
    """The report generated by the FuzzingAgent."""
    target_url: str = ""
    raw_output: str = ""
    findings: List[FuzzingFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class CrashReport(AgentData):
    """Report generated by the CrashAnalyzerAgent."""
    target_binary: str = ""
    crash_type: str = "" # e.g., "Segmentation Fault", "Buffer Overflow"
    vulnerability_type: str = "" # e.g., "Memory Corruption", "Use-After-Free"
    classification: str = "UNKNOWN" # e.g., "EXPLOITABLE", "PROBABLY_EXPLOITABLE", "NOT_EXPLOITABLE"
    poc_path: Optional[str] = None # Path to generated Proof of Concept
    analysis_summary: str = ""

    def to_dict(self):
        return self.model_dump()


class APIFuzzerReport(AgentData):
    """Report from the APIFuzzerAgent."""
    endpoints_tested: int = 0
    vulnerabilities_found: List[Dict[str, Any]] = Field(default_factory=list)



class PayloadGeneratorReport(AgentData):
    """Report from the PayloadGeneratorAgent."""
    payload: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


@dataclass
class VulnerabilityFinding:
    cve: str = ""
    score: float = 0.0
    description: str = ""
    port: int = 0
    protocol: str = "tcp"


class ScannerReport(AgentData):
    target: str = ""
    findings: List[VulnerabilityFinding] = Field(default_factory=list)
    summary: str = ""
    raw_report_path: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class PostExReport(AgentData):
    """Report from the PostExAgent with initial host enumeration."""
    shell_id: str
    privilege_level: str = "user"
    user: str = ""
    hostname: str = ""
    os_info: str = ""
    network_info: str = ""
    processes: str = ""
    home_dir_listing: str = ""
    raw_output: Dict[str, str] = Field(default_factory=dict)
    analysis: List["PostExFinding"] = Field(default_factory=list)
    log_cleaning_status: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class PostExFinding:
    """A single finding from the PostExAgent's analysis."""
    type: str
    description: str
    confidence: float = 0.75


@dataclass
class PrivilegeEscalationVector:
    """A structured representation of a potential privilege escalation vector."""
    type: str
    details: str
    command: str
    confidence: float = 0.75


class PrivilegeEscalationReport(AgentData):
    """Report from the PrivilegeEscalationAgent after scanning for vectors."""
    shell_id: str
    script_output: str = ""
    potential_vectors: List[PrivilegeEscalationVector] = Field(
        default_factory=list)

    def to_dict(self):
        return self.model_dump()


class DataDumpReport(AgentData):
    """Report from the DataDumperAgent."""
    shell_id: str
    dump_targets: List[Dict[str, str]] = Field(default_factory=list)
    dumped_data: Dict[str, str] = Field(default_factory=dict)

    def to_dict(self):
        return self.model_dump()


class PersistenceReport(AgentData):
    """Report from the PersistenceAgent."""
    shell_id: str
    persistence_type: str

    def to_dict(self):
        return self.model_dump()


class WafBypassReport(AgentData):
    """Report from the WAF Bypass Expert, detailing attempts to evade a WAF."""
    summary: str = ""
    origin_ip: Optional[str] = None
    original_payload: str = ""
    tested_bypass_payloads: List[Dict[str, Any]] = Field(default_factory=list)
    successful_bypass_payload: Optional[str] = None
    waf_behavior_summary: str = ""

    def to_dict(self):
        return self.model_dump()

# --- NEW: Lateral Movement --- #


@dataclass
class DiscoveredHost:
    """Represents a host discovered during internal network reconnaissance."""
    ip_address: str
    hostname: Optional[str] = None
    open_ports: List[int] = field(default_factory=list)
    os: Optional[str] = None


@dataclass
class SuccessfulPivot:
    """Represents a successful lateral movement to a new host."""
    ip_address: str
    credential_used: str  # e.g., "password for user 'admin'" or "ssh key for 'root'"
    new_shell_id: str
    hostname: Optional[str] = None


class LateralMovementReport(AgentData):
    """Report from the LateralMovementAgent."""
    summary: str
    discovered_hosts: List[DiscoveredHost] = Field(default_factory=list)
    successful_pivots: List[SuccessfulPivot] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


@dataclass
class NetworkGraph:
    """Represents the internal network as a graph."""
    nodes: List[DiscoveredHost] = field(default_factory=list)
    # e.g., [{"source": "192.168.1.1", "target": "192.168.1.2"}
    edges: List[Dict[str, str]] = field(default_factory=list)


class ZeroDayReport(AgentData):
    summary: str
    has_potential_zero_day: bool = False
    findings: list = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class DashboardReport(AgentData):
    """Report from the DashboardAgent, primarily for status indication."""
    status_message: str = ""

    def to_dict(self):
        return self.model_dump()


class DoHTestReport(AgentData):
    """Report from the DoHTestAgent, detailing DoH C2 communication tests."""
    implant_id: str = ""
    command_sent: str = ""
    result_sent: str = ""
    c2_response: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class PortScanReport(AgentData):
    """Report from the PortScanAgent, containing Nmap scan results."""
    scan_results: List[Dict[str, Any]] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class ProxyReport(AgentData):
    """Report from the ProxyAgent, indicating the status of the proxy."""
    proxy_status: str = "unknown"  # e.g., "started", "stopped", "error"
    proxy_port: Optional[int] = None

    def to_dict(self):
        return self.model_dump()


class QuerySynthesizerReport(AgentData):
    """Report from the QuerySynthesizerAgent, containing generated search queries."""
    queries: List[str] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class ResourceManagerReport(AgentData):
    """Report from the ResourceManagerAgent, detailing system resource usage and recommendations."""
    cpu_percent: float = 0.0
    memory_percent: float = 0.0
    network_send_speed_mbps: float = 0.0
    network_recv_speed_mbps: float = 0.0
    recommendations: List[str] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class ScannerReportAnalyzerReport(AgentData):
    """Report from the ScannerReportAnalyzer, containing extracted findings."""
    findings: List[InterestingFinding] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class SelfRepairReport(AgentData):
    """Report from the SelfRepairAgent, detailing attempts to fix failed commands."""
    original_command: str = ""
    suggested_command: Optional[str] = None
    fix_result: Optional[Dict[str, Any]] = None

    def to_dict(self):
        return self.model_dump()


class ShellReport(AgentData):
    """Report from the ShellAgent, detailing shell operations."""
    action: str = ""
    shell_id: Optional[str] = None
    command: Optional[str] = None
    output: Optional[str] = None
    shells: Optional[Dict[str, Any]] = None

    def to_dict(self):
        return self.model_dump()


class SQLInjectionReport(AgentData):
    """Report from the SQLInjectionExploiter, detailing SQL injection attempts."""
    target_url: str = ""
    command: str = ""
    output: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class StrategyBuilderReport(AgentData):
    """Report from the StrategyBuilder, detailing the strategies generated."""
    generated_strategies: List[Strategy] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class SubPlannerReport(AgentData):
    """Report from the SubPlanner, detailing the strategies generated."""
    generated_strategies: List[Strategy] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class ToolManagerReport(AgentData):
    """Report from the ToolManagerAgent, detailing tool installation, configuration, and verification."""
    tool_name: str = ""
    action: str = ""
    output: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class VulnerabilityScanReport(AgentData):
    """Report from the VulnerabilityScanAgent, detailing vulnerability scan results."""
    target: str = ""
    scan_results: List[Dict[str, Any]] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class WebCrawlerReport(AgentData):
    """Report from the WebCrawlerAgent, detailing crawled URLs and forms."""
    base_url: str = ""
    crawled_urls: List[str] = Field(default_factory=list)
    forms: List[Dict[str, Any]] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class SearchCollectorReport(AgentData):
    """Report from the SearchCollector agent."""
    query: str = ""
    results: List[Dict[str, Any]] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class SymbolicExecutionReport(AgentData):
    """Report from the SymbolicExecutor agent."""
    target_binary: str = ""
    vulnerabilities: List[Dict[str, Any]] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class ReverseEngineeringReport(AgentData):
    """Report from the ReverseEngineer agent."""
    target_binary: str = ""
    analysis_results: List[Dict[str, Any]] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class TelemetryReport(AgentData):
    """Report from the TelemetryHunter agent."""
    target_system: str = ""
    collected_data: List[str] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class MetasploitReport(AgentData):
    """Report from the MetasploitAgent."""
    target_host: str = ""
    module_used: str = ""
    session_id: Optional[str] = None
    output: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class SSRFFinding:
    """Represents a single SSRF finding."""
    vulnerable_url: str
    payload: str
    description: str
    response_body: Optional[str] = None


class SSRFReport(AgentData):
    """Report from the SSRFAgent."""
    target: str = ""
    findings: List[SSRFFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class BOLAFinding:
    """Represents a single Broken Object Level Authorization finding."""
    vulnerable_url: str
    parameter_type: str  # e.g., 'path', 'query'
    parameter_name: str
    original_value: str
    test_payload: str
    reasoning: str

    def to_dict(self):
        return self.__dict__


class BOLAReport(AgentData):
    """Report from the BOLA_Agent."""
    agent_name: str = "BOLA_Agent"
    findings: List[BOLAFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class ProxyLogEntry:
    """Represents a single entry in the proxy log."""
    request_method: str
    request_url: str
    request_headers: Dict[str, str]
    request_content: Optional[str]
    response_status_code: int
    response_headers: Dict[str, str]
    response_content: Optional[str]

    def to_dict(self):
        return self.__dict__


class ProxyReport(AgentData):
    """Report from the ProxyAgent, containing all logged traffic."""
    agent_name: str = "ProxyAgent"
    log_entries: List[ProxyLogEntry] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class RateLimitFinding:
    """Represents a single rate limiting test result."""
    endpoint: str
    message: str
    vulnerable: bool

    def to_dict(self):
        return self.__dict__


class RateLimitReport(AgentData):
    """Report from the RateLimit_Agent."""
    agent_name: str = "RateLimit_Agent"
    findings: List[RateLimitFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class AuthFinding:
    """Represents a single Authentication/Authorization finding."""
    finding_type: str  # e.g., 'brute_force_success', 'weak_jwt_secret', 'jwt_none_algorithm'
    endpoint: str
    details: str

    def to_dict(self):
        return self.__dict__


class AuthReport(AgentData):
    """Report from the Auth_Agent."""
    agent_name: str = "Auth_Agent"
    findings: List[AuthFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class XSSFinding:
    """Represents a single Cross-Site Scripting (XSS) finding."""
    vulnerable_url: str
    payload: str
    description: str
    stolen_cookie: Optional[str] = None

    def to_dict(self):
        return self.__dict__


class XSSReport(AgentData):
    """Report from the XSS_Agent."""
    agent_name: str = "XSS_Agent"
    findings: List[XSSFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class CommandInjectionFinding:
    """Represents a single Command Injection finding."""
    vulnerable_url: str
    tool_used: str  # e.g., 'commix', 'manual'
    command: str
    output: str

    def to_dict(self):
        return self.__dict__


class CommandInjectionReport(AgentData):
    """Report from the CommandInjectionExploiter."""
    agent_name: str = "CommandInjectionExploiter"
    findings: List[CommandInjectionFinding] = Field(default_factory=list)
    summary: str = ""
    binary_path: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class DDoSReport(AgentData):
    """Report from the DDoSAgent."""
    agent_name: str = "DDoSAgent"
    target: str = ""
    summary: str = ""
    output: str = ""
    findings: list = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class BotDeploymentReport(AgentData):
    """Report from the BotDeploymentAgent."""
    agent_name: str = "BotDeploymentAgent"
    shell_id: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class MonitorReport(AgentData):
    """Report from the MonitorAgent."""
    target_url: str
    duration: int
    final_status: str  # e.g., "Target Appears Online", "Target Unreachable"
    successful_requests: int
    failed_requests: int
    average_response_time: float
    status_codes: List[int] = Field(default_factory=list)
    summary: str = ""
    findings: List[Finding] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class ExploitReport(AgentData):
    """Report from the ExploitAgent."""
    agent_name: str = "ExploitAgent"
    shell_id: Optional[str] = None
    exploit_code: Optional[str] = None
    output: Optional[str] = None
    findings: List[Finding] = Field(
        default_factory=list)  # To hold heuristic data

    def to_dict(self):
        return self.model_dump()


@dataclass
class InfiltratorFinding:
    """Represents a single secret or piece of information found on the target system."""
    finding_type: str  # e.g., 'password', 'api_key', 'ssh_key'
    value: str
    source: str  # e.g., '/etc/shadow', '.env'

    def to_dict(self):
        return self.__dict__


class InfiltratorReport(AgentData):
    """Report from the InfiltratorAgent."""
    agent_name: str = "InfiltratorAgent"
    shell_id: Optional[str] = None
    findings: List[InfiltratorFinding] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class HydraSuccessFinding(BaseModel):
    """Represents a successful login from Hydra."""
    host: str
    port: int
    service: str
    username: str
    password: str

    def to_dict(self):
        return self.model_dump()


class Credential(BaseModel):
    """Represents a single credential found on a target system."""
    host: Optional[str] = None
    username: Optional[str] = None
    password: Optional[str] = None
    hash: Optional[str] = None
    key: Optional[str] = None
    source_agent: str
    source_file: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class NmapServiceFinding(BaseModel):
    """Represents a service found by Nmap."""
    host: str
    port: int
    protocol: str
    service: str
    product: str
    version: str

    def to_dict(self):
        return self.model_dump()


class SQLInjectionFinding(BaseModel):
    """Represents a SQL injection finding."""
    url: str
    payload: str
    description: str
    output: Dict[str, Any]

    def to_dict(self):
        return self.model_dump()


class Vulnerability(BaseModel):
    """Represents a single, confirmed vulnerability."""
    host: str
    vulnerability_id: str
    description: str
    severity: str
    source_agent: str
    exploit_payload_hex: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class ReportingReport(AgentData):
    """Report from the ReportingAgent."""
    agent_name: str = "ReportingAgent"
    report_path: Optional[str] = None
    content: Optional[str] = None

    def to_dict(self):
        return self.model_dump()


class HealthReport(AgentData):
    """Report from the HealthCheckAgent."""
    agent_name: str = "HealthCheckAgent"
    tool_status: Dict[str, Dict[str, str]] = Field(default_factory=dict)
    service_status: Dict[str, str] = Field(default_factory=dict)

    def to_dict(self):
        return self.model_dump()


@dataclass
class SearchResult:
    """Represents a single search result."""
    title: str
    link: str
    snippet: str


class SymbolicExecutionFinding(BaseModel):
    """Represents a single finding from symbolic execution."""
    vulnerability_type: str
    description: str
    severity: str
    exploit_payload_hex: Optional[str] = None


class SymbolicExecutionReport(AgentData):
    """Report from the SymbolicExecutor agent."""
    target_binary: str = ""
    vulnerabilities: List[SymbolicExecutionFinding] = Field(
        default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


@dataclass
class TelemetryFinding:
    """Represents a single piece of collected telemetry data."""
    data_type: str
    value: Any
    source: str
    timestamp: str


class ThreatAssessmentReport(AgentData):
    """Report from the ThreatAssessorReporter agent."""
    overall_score: float = 0.0
    summary: str = ""
    recommendations: List[str] = Field(default_factory=list)
    vulnerabilities_found: List[str] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()


class TechnologyProfilerReport(AgentData):
    """Report from the TechnologyProfilerAgent."""
    agent_name: str = "TechnologyProfilerAgent"
    hostname: str
    profiled_technologies: Dict[str, str] = Field(default_factory=dict)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class VulnerabilityMappingReport(AgentData):
    """Report from the VulnerabilityMappingAgent."""
    agent_name: str = "VulnerabilityMappingAgent"
    hostname: str
    technologies_mapped: Dict[str, List[str]] = Field(default_factory=dict)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


class ShellUpgraderReport(AgentData):
    """Report from the ShellUpgraderAgent."""
    agent_name: str = "ShellUpgraderAgent"
    shell_id: str
    technique_used: str = ""

    def to_dict(self):
        return self.model_dump()


class LivingOffTheLandReport(AgentData):
    """Report from the LivingOffTheLandAgent."""
    agent_name: str = "LivingOffTheLandAgent"
    shell_id: str
    technique: str
    command_executed: str

    def to_dict(self):
        return self.model_dump()


class PrivilegeEscalationExploiterReport(AgentData):
    """Report from the PrivilegeEscalationExploiter."""
    agent_name: str = "PrivilegeEscalationExploiter"
    shell_id: str
    technique_used: str = ""

    def to_dict(self):
        return self.model_dump()


class DataHarvesterReport(AgentData):
    """Report from the DataHarvester agent."""
    agent_name: str = "DataHarvesterAgent"
    collected_files: List[str] = Field(default_factory=list)
    parsing_results: Dict[str, Any] = Field(default_factory=dict)

    def to_dict(self):
        return self.model_dump()


class DataExfiltrationReport(AgentData):
    """Report from the DataExfiltrationAgent."""
    agent_name: str = "DataExfiltrationAgent"
    shell_id: str
    exfiltrated_file_path: str = ""
    file_size: int = 0

    def to_dict(self):
        return self.model_dump()


class DefensiveCountermeasuresReport(AgentData):
    """Report from the DefensiveCountermeasuresAgent."""
    agent_name: str = "DefensiveCountermeasuresAgent"
    shell_id: str
    detected_tools: List[str] = Field(default_factory=list)
    summary: str = ""

    def to_dict(self):
        return self.model_dump()


# --- Orchestrator-level Models ---#


class Strategy(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    phase: AttackPhase
    scan_intensity: Optional[ScanIntensity] = ScanIntensity.NORMAL
    next_agent: str
    directive: str
    context: Dict[str, Any] = {}
    pivot_shell_id: Optional[str] = None
    target_db: Optional[str] = None
    # New fields for enhanced AI strategy
    llm_reasoning: Optional[str] = None
    confidence_score: Optional[float] = None
    alternative_strategies: Optional[List['Strategy']] = None

    def to_dict(self):
        d = self.model_dump()
        d["phase"] = self.phase.name
        d["scan_intensity"] = self.scan_intensity.name
        if self.alternative_strategies:
            d["alternative_strategies"] = [alt.to_dict() for alt in self.alternative_strategies]
        return d


class LiveHost(BaseModel):
    ip: str
    ports: List[Dict[str, Any]] = Field(default_factory=list)


class InternalScanReport(AgentData):
    """Report from the InternalNetworkMapperAgent."""
    summary: str = ""
    raw_output: str = ""
    live_hosts: List[LiveHost] = Field(default_factory=list)

    def to_dict(self):
        return self.model_dump()



# --- Target Model for CLI and Attack Commands --- #

class Target(BaseModel):
    """Target model for attack CLI commands"""
    name: str
    url: str
    attack_mode: bool = True
    aggressive: bool = False
    vuln_type: Optional[str] = None
    callback_url: Optional[str] = None
    scan_results: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def to_dict(self):
        return self.model_dump()

