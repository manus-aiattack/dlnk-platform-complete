# agents/post_exploitation_master.py

from core.data_models import PostExReport, Strategy, AttackPhase, ErrorType
from core.logger import log
import asyncio
import time
from typing import Optional
from core.shell_manager import ShellManager

from core.base_agent import BaseAgent


class PostExploitationMaster(BaseAgent):
    supported_phases = [AttackPhase.ESCALATION] # Corrected phase
    required_tools = ["linpeas.sh", "winpeas.exe", "lazagne.exe"]

    def __init__(self, context_manager=None, orchestrator=None, **kwargs):
        super().__init__(context_manager, orchestrator, **kwargs)
        self.shell_manager: Optional[ShellManager] = None
        self.report_class = PostExReport
        self.POST_EXPLOIT_TOOLS = {
            "linux_priv_check": "linpeas.sh",
            "windows_priv_check": "winpeas.exe",
            "credential_harvester": "lazagne.exe"}

    async def setup(self):
        """Asynchronous setup method for PostExploitationMaster."""
        self.shell_manager = await self.context_manager.get_context('shell_manager')

    async def run(self, strategy: Strategy, **kwargs) -> PostExReport:
        start_time = time.time()
        log.phase("Post-Exploitation Master: Starting post-exploitation...")
        shell_id = strategy.context.get("shell_id")
        if not shell_id:
            end_time = time.time()
            return PostExReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                errors=["No shell ID provided for post-exploitation."],
                error_type=ErrorType.CONFIGURATION,
                summary="Post-exploitation failed: Missing shell ID."
            )

        # For now, we will just run a simple command to get system info.
        # In the future, we will run more advanced modules based on the strategy.
        command = "uname -a"
        result = await self.shell_manager.send_command(shell_id, command)
        end_time = time.time()

        if result and "Error:" not in result:
            log.success(f"Successfully executed command on shell {shell_id}.")
            return PostExReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                shell_id=shell_id,
                os_info=result,
                summary=f"Successfully executed basic enumeration on shell {shell_id}."
            )
        else:
            error_msg = f"Failed to execute command on shell {shell_id}. Result: {result}"
            log.error(error_msg)
            return PostExReport(
                agent_name=self.__class__.__name__,
                start_time=start_time,
                end_time=end_time,
                shell_id=shell_id,
                errors=[error_msg],
                error_type=ErrorType.LOGIC,
                summary=f"Failed to execute basic enumeration on shell {shell_id}."
            )
