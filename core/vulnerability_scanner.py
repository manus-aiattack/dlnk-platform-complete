"""
dLNk Attack Platform - Vulnerability Scanner
Comprehensive vulnerability scanning
"""

import asyncio
from typing import Dict, Any, List
from loguru import logger

# Import all agents
from agents.sqlmap_agent import SqlmapAgent
from advanced_agents.xss_hunter import XSSHunter
from agents.command_injection_exploiter import CommandInjectionExploiter
from agents.ssrf_agent_weaponized import SSRFAgent
from advanced_agents.auth_bypass import AuthenticationBypassAgent
from advanced_agents.zero_day_hunter import ZeroDayHunterAgent as ZeroDayHunter


class VulnerabilityScanner:
    """Comprehensive vulnerability scanner using all agents"""
    
    def __init__(self):
        # Agents will be initialized when needed
        self.agents = {}
    
    async def scan(
        self,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Comprehensive vulnerability scan
        
        Args:
            target_url: Target URL
            target_info: Target reconnaissance data
        
        Returns:
            Scan results with all discovered vulnerabilities
        """
        logger.info(f"🔍 Starting comprehensive vulnerability scan...")
        logger.info(f"   Target: {target_url}")
        logger.info(f"   Agents: {len(self.agents)}")
        
        results = {
            "target_url": target_url,
            "vulnerabilities": [],
            "scan_results": {},
            "total_vulns": 0,
            "critical": 0,
            "high": 0,
            "medium": 0,
            "low": 0
        }
        
        # Run all agents in parallel
        tasks = []
        
        for agent_name, agent in self.agents.items():
            task = self._run_agent_scan(agent_name, agent, target_url, target_info)
            tasks.append(task)
        
        # Wait for all scans to complete
        scan_results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # Process results
        for agent_name, agent_result in zip(self.agents.keys(), scan_results):
            if isinstance(agent_result, Exception):
                logger.error(f"Agent {agent_name} failed: {agent_result}")
                results["scan_results"][agent_name] = {
                    "error": str(agent_result),
                    "vulnerabilities": []
                }
            else:
                results["scan_results"][agent_name] = agent_result
                
                # Add vulnerabilities
                for vuln in agent_result.get("vulnerabilities", []):
                    results["vulnerabilities"].append(vuln)
                    
                    # Count by severity
                    severity = vuln.get("severity", "low")
                    if severity == "critical":
                        results["critical"] += 1
                    elif severity == "high":
                        results["high"] += 1
                    elif severity == "medium":
                        results["medium"] += 1
                    else:
                        results["low"] += 1
        
        results["total_vulns"] = len(results["vulnerabilities"])
        
        logger.info(f"✅ Vulnerability scan complete")
        logger.info(f"   Total: {results['total_vulns']}")
        logger.info(f"   Critical: {results['critical']}")
        logger.info(f"   High: {results['high']}")
        logger.info(f"   Medium: {results['medium']}")
        logger.info(f"   Low: {results['low']}")
        
        return results
    
    async def _run_agent_scan(
        self,
        agent_name: str,
        agent: Any,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Run individual agent scan"""
        logger.info(f"   🔎 Running {agent_name} scan...")
        
        try:
            # Different agents have different interfaces
            if agent_name == "sql_injection":
                result = await self._scan_sql_injection(agent, target_url, target_info)
            elif agent_name == "xss":
                result = await self._scan_xss(agent, target_url, target_info)
            elif agent_name == "command_injection":
                result = await self._scan_command_injection(agent, target_url, target_info)
            elif agent_name == "ssrf":
                result = await self._scan_ssrf(agent, target_url, target_info)
            elif agent_name == "auth_bypass":
                result = await self._scan_auth_bypass(agent, target_url, target_info)
            elif agent_name == "zero_day":
                result = await self._scan_zero_day(agent, target_url, target_info)
            else:
                result = {"vulnerabilities": []}
            
            logger.info(f"   ✅ {agent_name}: {len(result.get('vulnerabilities', []))} vulns")
            
            return result
        
        except Exception as e:
            logger.error(f"   ❌ {agent_name} failed: {e}")
            return {"error": str(e), "vulnerabilities": []}
    
    async def _scan_sql_injection(
        self,
        agent: SqlmapAgent,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for SQL injection"""
        vulnerabilities = []
        
        # Get forms and inputs
        forms = target_info.get("forms", [])
        inputs = target_info.get("inputs", [])
        
        # Scan each form
        for form in forms[:5]:  # Limit to 5 forms
            try:
                result = await agent.scan_target(target_url)
                if result.get("vulnerable"):
                    vulnerabilities.append({
                        "type": "sql_injection",
                        "severity": "critical",
                        "title": "SQL Injection Vulnerability",
                        "description": result.get("details", ""),
                        "url": target_url,
                        "parameter": result.get("parameter"),
                        "payload": result.get("payload"),
                        "evidence": result.get("evidence"),
                        "cvss_score": 9.0,
                        "metadata": result
                    })
            except Exception as e:
                print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}
    
    async def _scan_xss(
        self,
        agent: XSSHunter,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for XSS"""
        vulnerabilities = []
        
        try:
            result = await agent.scan(target_url)
            
            for vuln in result.get("vulnerabilities", []):
                vulnerabilities.append({
                    "type": "xss",
                    "severity": vuln.get("severity", "high"),
                    "title": f"XSS Vulnerability ({vuln.get('xss_type', 'Unknown')})",
                    "description": vuln.get("description", ""),
                    "url": vuln.get("url", target_url),
                    "parameter": vuln.get("parameter"),
                    "payload": vuln.get("payload"),
                    "evidence": vuln.get("evidence"),
                    "cvss_score": 7.5,
                    "metadata": vuln
                })
        except Exception as e:
            print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}
    
    async def _scan_command_injection(
        self,
        agent: CommandInjectionExploiter,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for command injection"""
        vulnerabilities = []
        
        try:
            result = await agent.scan_target(target_url)
            
            if result.get("vulnerable"):
                vulnerabilities.append({
                    "type": "command_injection",
                    "severity": "critical",
                    "title": "Command Injection Vulnerability",
                    "description": result.get("details", ""),
                    "url": target_url,
                    "parameter": result.get("parameter"),
                    "payload": result.get("payload"),
                    "evidence": result.get("output"),
                    "cvss_score": 9.5,
                    "metadata": result
                })
        except Exception as e:
            print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}
    
    async def _scan_ssrf(
        self,
        agent: SSRFAgent,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for SSRF"""
        vulnerabilities = []
        
        try:
            result = await agent.scan(target_url)
            
            if result.get("vulnerable"):
                vulnerabilities.append({
                    "type": "ssrf",
                    "severity": "high",
                    "title": "SSRF Vulnerability",
                    "description": result.get("details", ""),
                    "url": target_url,
                    "parameter": result.get("parameter"),
                    "payload": result.get("payload"),
                    "evidence": result.get("evidence"),
                    "cvss_score": 8.0,
                    "metadata": result
                })
        except Exception as e:
            print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}
    
    async def _scan_auth_bypass(
        self,
        agent: AuthenticationBypassAgent,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for authentication bypass"""
        vulnerabilities = []
        
        try:
            result = await agent.scan(target_url)
            
            for vuln in result.get("vulnerabilities", []):
                vulnerabilities.append({
                    "type": "auth_bypass",
                    "severity": "critical",
                    "title": f"Authentication Bypass ({vuln.get('bypass_type', 'Unknown')})",
                    "description": vuln.get("description", ""),
                    "url": vuln.get("url", target_url),
                    "parameter": vuln.get("parameter"),
                    "payload": vuln.get("payload"),
                    "evidence": vuln.get("evidence"),
                    "cvss_score": 9.0,
                    "metadata": vuln
                })
        except Exception as e:
            print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}
    
    async def _scan_zero_day(
        self,
        agent: ZeroDayHunter,
        target_url: str,
        target_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Scan for zero-day vulnerabilities"""
        vulnerabilities = []
        
        try:
            result = await agent.hunt(target_url, target_info)
            
            for vuln in result.get("potential_zero_days", []):
                vulnerabilities.append({
                    "type": "zero_day",
                    "severity": "critical",
                    "title": f"Potential Zero-Day: {vuln.get('title', 'Unknown')}",
                    "description": vuln.get("description", ""),
                    "url": target_url,
                    "parameter": vuln.get("parameter"),
                    "payload": vuln.get("payload"),
                    "evidence": vuln.get("evidence"),
                    "cvss_score": 10.0,
                    "metadata": vuln
                })
        except Exception as e:
            print("Error occurred")
        
        return {"vulnerabilities": vulnerabilities}

