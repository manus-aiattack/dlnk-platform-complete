
import yaml
from core.data_models import InterestingFinding, ReconData
from core.logger import log


class VulnerabilityPrioritizer:
    def __init__(self, rules_file):
        self.rules = self._load_rules(rules_file)

    def _load_rules(self, rules_file):
        try:
            with open(rules_file, 'r') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            log.error(f"Scoring rules file not found: {rules_file}")
            return {}
        except yaml.YAMLError as e:
            log.error(f"Error parsing scoring rules file: {e}")
            return {}

    def prioritize(self, recon_data: ReconData) -> list[InterestingFinding]:
        findings = []

        # Prioritize open ports
        if recon_data.network_services and self.rules.get('ports'):
            for service in recon_data.network_services:
                for rule in self.rules['ports']:
                    if service['port'] == rule['port']:
                        finding = InterestingFinding(
                            finding=f"Open port found: {service['port']}/{service['service']}",
                            reasoning=rule['reason'],
                            priority=rule['priority'],
                            next_steps=f"Investigate port {service['port']} for potential vulnerabilities."
                        )
                        findings.append(finding)
                        log.info(
                            f"Prioritized open port {service['port']} with priority {rule['priority']}")

        # Prioritize interesting files
        if recon_data.directories and self.rules.get('files'):
            for path in recon_data.directories:
                for rule in self.rules['files']:
                    if rule['name'] in path:
                        finding = InterestingFinding(
                            finding=f"Interesting file found: {path}",
                            reasoning=rule['reason'],
                            priority=rule['priority'],
                            next_steps="Review the file content for sensitive information."
                        )
                        findings.append(finding)
                        log.info(
                            f"Prioritized file {path} with priority {rule['priority']}")

        # Prioritize keywords in harvester results
        if recon_data.harvester_results and self.rules.get('keywords'):
            for result in recon_data.harvester_results:
                for rule in self.rules['keywords']:
                    if rule['keyword'] in result.lower():
                        finding = InterestingFinding(
                            finding=f"Interesting keyword '{rule['keyword']}' found in harvester results: {result}",
                            reasoning=rule['reason'],
                            priority=rule['priority'],
                            next_steps="Review the harvester results for sensitive data."
                        )
                        findings.append(finding)
                        log.info(
                            f"Prioritized keyword '{rule['keyword']}' with priority {rule['priority']}")

        # Prioritize technologies
        if recon_data.http_servers and self.rules.get('technologies'):
            for server in recon_data.http_servers:
                for rule in self.rules['technologies']:
                    if rule['name'] in server.lower():
                        finding = InterestingFinding(
                            finding=f"{rule['name'].capitalize()} server found: {server}",
                            reasoning=rule['reason'],
                            priority=rule['priority'],
                            next_steps=f"Scan the server for known {rule['name'].capitalize()} vulnerabilities."
                        )
                        findings.append(finding)
                        log.info(
                            f"Prioritized technology '{rule['name']}' with priority {rule['priority']}")

        # Add other recon data as low-priority findings
        if recon_data.subdomains:
            findings.append(InterestingFinding(
                finding=f"Found {len(recon_data.subdomains)} resolvable subdomains.",
                reasoning="Subdomains can reveal hidden services or applications.",
                priority=1,  # Low priority
                next_steps="Further enumerate and investigate these subdomains."
            ))

        # Sort findings by priority (descending)
        findings.sort(key=lambda x: x.priority, reverse=True)

        return findings
