#!/usr/bin/env python3.11
"""
HK - Hacker Knowledge CLI
Ultra simple version - just print questions and wait for Manus to answer
"""

import sys
import json
from datetime import datetime
from pathlib import Path

try:
    from rich.console import Console
    from rich.markdown import Markdown
    from rich.panel import Panel
    from rich.prompt import Prompt
except ImportError:
    import os
    os.system("pip3 install -q rich >&2")
    from rich.console import Console
    from rich.markdown import Markdown
    from rich.panel import Panel
    from rich.prompt import Prompt


class HK:
    def __init__(self):
        self.console = Console()
        self.history_dir = Path.home() / '.hk_history'
        self.history_dir.mkdir(exist_ok=True)
        self.history_file = self.history_dir / 'conversation.json'
        self.history = []
        self._load_history()
    
    def _load_history(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        try:
            if self.history_file.exists():
                data = json.loads(self.history_file.read_text(encoding='utf-8'))
                self.history = data.get('messages', [])[-50:]
        except:
            pass
    
    def _save_history(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        try:
            self.history_file.write_text(json.dumps({
                'timestamp': datetime.now().isoformat(),
                'messages': self.history
            }, ensure_ascii=False, indent=2), encoding='utf-8')
        except:
            pass
    
    def banner(self):
        """‡πÅ‡∏™‡∏î‡∏á banner"""
        self.console.print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó                    ‚ïë
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù                    ‚ïë
‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                     ‚ïë
‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó                     ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó                    ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù                    ‚ïë
‚ïë                                                           ‚ïë
‚ïë   HK - Hacker Knowledge                                  ‚ïë
‚ïë   Powered by Manus AI                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""", style="bold cyan")
        
        if self.history:
            self.console.print(f"[dim]‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {len(self.history)} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°[/dim]\n")
    
    def run(self):
        """Main loop"""
        self.banner()
        
        while True:
            try:
                # ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                question = Prompt.ask("\n[bold green]You[/bold green]").strip()
                
                if not question:
                    continue
                
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
                if question.lower() in ['exit', 'quit', 'q']:
                    self.console.print("\n[cyan]üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô![/cyan]\n")
                    break
                
                elif question.lower() == 'clear':
                    self.history = []
                    self._save_history()
                    import os
                    os.system('clear')
                    self.banner()
                    continue
                
                elif question.lower() == 'history':
                    self.console.print("\n[cyan]‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:[/cyan]\n")
                    for msg in self.history[-10:]:
                        role = "You" if msg['role'] == 'user' else "Manus"
                        content = msg['content'][:80] + "..." if len(msg['content']) > 80 else msg['content']
                        self.console.print(f"[dim]{role}:[/dim] {content}")
                    continue
                
                elif question.lower() == 'help':
                    self.console.print(Panel("""
**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
- exit/quit/q - ‡∏≠‡∏≠‡∏Å
- clear - ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
- history - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
- help - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠

**‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ Manus ‡∏à‡∏∞‡∏ï‡∏≠‡∏ö
""", title="Help", border_style="cyan"))
                    continue
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                self.history.append({
                    'role': 'user',
                    'content': question,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ Manus ‡πÄ‡∏´‡πá‡∏ô (‡πÉ‡∏ô terminal output)
                self.console.print(f"\n[yellow]üì§ Question:[/yellow] {question}")
                self.console.print("[dim]Waiting for Manus...[/dim]\n")
                
                # ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Manus (‡∏ú‡πà‡∏≤‡∏ô stdin)
                self.console.print("[cyan]ü§ñ Manus AI:[/cyan]")
                
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (Manus ‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≤‡∏á stdin)
                # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ Manus ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô terminal ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ redirect
                
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo: ‡πÉ‡∏´‡πâ user ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏≠‡∏á (simulate Manus)
                # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á Manus ‡∏à‡∏∞ inject ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                
                self.console.print("[dim](Manus will answer here automatically)[/dim]")
                self.console.print("[yellow]For now, type answer manually (or press Enter to skip):[/yellow]")
                
                answer = input().strip()
                
                if answer:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    self.history.append({
                        'role': 'assistant',
                        'content': answer,
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    try:
                        self.console.print(Markdown(answer))
                    except:
                        self.console.print(answer)
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    self._save_history()
                
            except KeyboardInterrupt:
                self.console.print("\n\n[cyan]üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô![/cyan]\n")
                break
            except Exception as e:
                self.console.print(f"[red]Error: {e}[/red]")


if __name__ == "__main__":
    hk = HK()
    hk.run()

